    Cookie: 当你在浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。

具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。
  1、什么是session
浏览器访问服务器时，服务器会创建一个 session 对象(该对象有一个唯一的 id, 一般称为 sessionId)。服务器在缺省情况下，会将 sessionId 以 cookie 机制发送给浏览器。当浏览器再次访问服务器时， 会将sessionId 发送给服务器。 服务器依据 sessionId 就可以找到对应的 session 对象。
 cookie 和session 的区别：
1、cookie数据存放在客户的浏览器上，session数据放在服务器上。
2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗
   考虑到安全应当使用session。
3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能
   考虑到减轻服务器性能方面，应当使用COOKIE。
4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。
5、所以个人建议：
   将登陆信息等重要信息存放为SESSION
   其他信息如果需要保留，可以放在COOKIE中

Cookie实例：
   1,利用Cookie进行自动登陆，不需要填写用户名和密码，可以自动登陆到系统
   2,显示最近浏览的5本书
   3,显示用户上次访问的时间
Session案例：
   1,用户登录效果:如果登录成功显示：欢迎回来，×××。如果失败，显示登录失败,使用Session区分不同的用户来实现
   2,表单是否重复提交
   3,图形验证码
   4,用session保存用户名和密码，  3ECCB351C7FECBFE994668DDCB131BDF




使用cookie的状态管理

---HTTP是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。

---假设要求登录认证的WEB页面本身无法进行状态的管理(不记录已登录的状态)，那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。不可否认，无状态协议有它的优点，因为不必保存状态，自然可以减少服务器的CPU及内存资源的消耗。也正是因为HTTP协议本身是非常简单的，所以才会被应用到各个场景里。

---保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了cookie技术。Cookie技术是通过在请求和响应报文中写入cookie信息来控制客户端的状态。

---cookie会根据从服务器端发送的响应报文内的一个叫做Set-cookie的首部字段信息，通知客户端保存cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入cookie值后发送出去。服务器端发送客户端发送来的cookie后，会去检查究竟是从哪一个客户端发送来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。

简单来说，就是

1.第一次请求（没有cookie信息状态下的请求）

     浏览器：保存请求

     服务器：生成cookie，记住是向谁发送的，在响应中添加cookie后返回

     浏览器：保存cookie

2.第二次请求

    浏览器：在请求中添加cookie后发送

    服务器：检查cookie，哦，原来是刚才那家伙的请求，响应

 Session机制

       Web应用程序中另一个记录客户端状态的方式：Session。Session是服务器端使用的一种记录客户端状态的机制，会增加服务器的存储压力。

客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是Session。浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。如果说Cookie机制是通过检查客户身上的通行证来确定客户的身份，那么Session机制就是通过检查服务器上的客户明细表来确认客户的身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要检查档案就可以了。当多个客户端执行程序时，服务器端会保存多个客户端的Session。获取Session的时候不需要声明获取谁的Session，Session机制决定了当前客户只会获取到自己的Session，而不会获取到别人的Session，各个Session彼此独立，互不相见。

Session 对浏览器的要求

      虽然Session保存在服务器，对客户端是透明的，它的正常运作仍然需要客户端浏览器的支持。这是因为Session需要使用Cookie作为识别标志。http协议是无状态的，session不能依据http连接来判断是否为统一客户，因此服务器向浏览器发送一个名为JSESSIONID的cookie，它的值为该Session的id.Session依据该Cookie来识别是否为同一用户。